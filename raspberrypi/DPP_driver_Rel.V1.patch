diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
index 48733c5f3..2f3022b6a 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
@@ -1548,6 +1548,10 @@ static s32 brcmf_set_wpa_version(struct net_device *ndev,
 		brcmf_err("set wpa_auth failed (%d)\n", err);
 		return err;
 	}
+	/* get the value for debug */
+	val=0;
+	err = brcmf_fil_bsscfg_int_get(netdev_priv(ndev), "wpa_auth", &val);
+	brcmf_dbg(CONN, "DBG: GET wpa_auth = [0x%0x] \n", val);
 	sec = &profile->sec;
 	sec->wpa_versions = sme->crypto.wpa_versions;
 	return err;
@@ -1682,6 +1686,7 @@ brcmf_set_key_mgmt(struct net_device *ndev, struct cfg80211_connect_params *sme)
 		return 0;
 
 	err = brcmf_fil_bsscfg_int_get(netdev_priv(ndev), "wpa_auth", &val);
+	brcmf_dbg(CONN, "DBG SET KEY MGMT  to [0x%0x] \n", val);
 	if (err) {
 		brcmf_err("could not get wpa_auth (%d)\n", err);
 		return err;
@@ -1719,6 +1724,9 @@ brcmf_set_key_mgmt(struct net_device *ndev, struct cfg80211_connect_params *sme)
 		case WLAN_AKM_SUITE_PSK:
 			val = WPA2_AUTH_PSK;
 			break;
+		case WLAN_AKM_SUITE_DPP:
+			val=WPA2_AUTH_PSK; /*TODO : This is not the actual value for DPP */
+			break;
 		default:
 			brcmf_err("invalid cipher group (%d)\n",
 				  sme->crypto.cipher_group);
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/p2p.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/p2p.c
index 30f4b06ee..63e6d3dd6 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/p2p.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/p2p.c
@@ -58,6 +58,7 @@
 #define P2P_PUB_AF_CATEGORY	0x04
 #define P2P_PUB_AF_ACTION	0x09
 #define P2P_AF_CATEGORY		0x7f
+#define P2P_DPP_OUI 		0x1A	/* DPP OUI */
 #define P2P_OUI			"\x50\x6F\x9A"	/* P2P OUI */
 #define P2P_OUI_LEN		3		/* P2P OUI length */
 
@@ -66,6 +67,9 @@
 #define DOT11_ACTION_CAT_OFF	0	/* category offset */
 #define DOT11_ACTION_ACT_OFF	1	/* action offset */
 
+/* Action Frame OUI */
+#define DPP_GAS_ACTION_OUI     11 /* OUI offset */
+
 #define P2P_AF_DWELL_TIME		200
 #define P2P_AF_MIN_DWELL_TIME		100
 #define P2P_AF_MED_DWELL_TIME		400
@@ -236,13 +240,39 @@ static bool brcmf_p2p_is_pub_action(void *frame, u32 frame_len)
 
 	if (pact_frm->category == P2P_PUB_AF_CATEGORY &&
 	    pact_frm->action == P2P_PUB_AF_ACTION &&
-	    pact_frm->oui_type == P2P_VER &&
+	    ((pact_frm->oui_type == P2P_VER) || (pact_frm->oui_type == P2P_DPP_OUI)) &&
 	    memcmp(pact_frm->oui, P2P_OUI, P2P_OUI_LEN) == 0)
 		return true;
 
 	return false;
 }
 
+/**
+ * brcmf_is_dpp_action() - true if dpp action type frame.
+ *
+ * @frame: action frame data.
+ * @frame_len: length of action frame data.
+ *
+ * Determine if action frame is DPP action type
+ */
+
+static bool brcmf_is_dpp_action (void *frame, u32 frame_len)
+{
+   struct brcmf_p2p_pub_act_frame *pact_frm;
+
+   if (frame == NULL)
+       return false;
+
+   pact_frm = (struct brcmf_p2p_pub_act_frame *)frame;
+   if (frame_len < sizeof(struct brcmf_p2p_pub_act_frame) - 1)
+       return false;
+
+   if (pact_frm->oui_type == P2P_DPP_OUI)
+       return true;
+
+   return false;
+}
+
 /**
  * brcmf_p2p_is_p2p_action() - true if p2p action type frame.
  *
@@ -1494,7 +1524,7 @@ int brcmf_p2p_notify_action_tx_complete(struct brcmf_if *ifp,
  * frame is transmitted.
  */
 static s32 brcmf_p2p_tx_action_frame(struct brcmf_p2p_info *p2p,
-				     struct brcmf_fil_af_params_le *af_params)
+				     struct brcmf_fil_af_params_le *af_params, bool is_dpp_frame)
 {
 	struct brcmf_cfg80211_vif *vif;
 	s32 err = 0;
@@ -1506,7 +1536,16 @@ static s32 brcmf_p2p_tx_action_frame(struct brcmf_p2p_info *p2p,
 	clear_bit(BRCMF_P2P_STATUS_ACTION_TX_COMPLETED, &p2p->status);
 	clear_bit(BRCMF_P2P_STATUS_ACTION_TX_NOACK, &p2p->status);
 
-	vif = p2p->bss_idx[P2PAPI_BSSCFG_DEVICE].vif;
+	/* if dpp frame; send it to primary interface */
+	if (is_dpp_frame) {
+		vif = p2p->bss_idx[P2PAPI_BSSCFG_PRIMARY].vif;
+		brcmf_dbg(INFO,"DBG: Using Wlan0 interface \n");
+	}
+	else {
+		vif = p2p->bss_idx[P2PAPI_BSSCFG_DEVICE].vif;
+		brcmf_dbg(INFO,"DBG: Using P2P interface \n");
+	}
+
 	err = brcmf_fil_bsscfg_data_set(vif->ifp, "actframe", af_params,
 					sizeof(*af_params));
 	if (err) {
@@ -1652,6 +1691,7 @@ bool brcmf_p2p_send_action_frame(struct brcmf_cfg80211_info *cfg,
 	struct afx_hdl *afx_hdl = &p2p->afx_hdl;
 	u16 action_frame_len;
 	bool ack = false;
+	bool is_dpp_oui=false;
 	u8 category;
 	u8 action;
 	s32 tx_retry;
@@ -1680,6 +1720,9 @@ bool brcmf_p2p_send_action_frame(struct brcmf_cfg80211_info *cfg,
 	config_af_params.search_channel = false;
 	config_af_params.extra_listen = false;
 
+	/* Identify DPP oui */
+	is_dpp_oui = brcmf_is_dpp_action(action_frame->data, action_frame_len);
+
 	if (brcmf_p2p_is_pub_action(action_frame->data, action_frame_len)) {
 		/* p2p public action frame process */
 		if (brcmf_p2p_pub_af_tx(cfg, af_params, &config_af_params)) {
@@ -1689,6 +1732,10 @@ bool brcmf_p2p_send_action_frame(struct brcmf_cfg80211_info *cfg,
 		}
 	} else if (brcmf_p2p_is_gas_action(action_frame->data,
 					   action_frame_len)) {
+		/* identify the DPP specific GAS frame */
+		if (action_frame->data[DPP_GAS_ACTION_OUI] == P2P_DPP_OUI)
+			is_dpp_oui=true;
+
 		/* service discovery process */
 		if (action == P2PSD_ACTION_ID_GAS_IREQ ||
 		    action == P2PSD_ACTION_ID_GAS_CREQ) {
@@ -1772,7 +1819,7 @@ bool brcmf_p2p_send_action_frame(struct brcmf_cfg80211_info *cfg,
 	tx_retry = 0;
 	while (!p2p->block_gon_req_tx &&
 	       (ack == false) && (tx_retry < P2P_AF_TX_MAX_RETRY)) {
-		ack = !brcmf_p2p_tx_action_frame(p2p, af_params);
+		ack = !brcmf_p2p_tx_action_frame(p2p, af_params, is_dpp_oui);
 		tx_retry++;
 	}
 	if (ack == false) {
diff --git a/include/linux/ieee80211.h b/include/linux/ieee80211.h
index 55a604ad4..3200b565a 100644
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -2430,7 +2430,8 @@ enum ieee80211_sa_query_action {
 #define WLAN_AKM_SUITE_FILS_SHA384		SUITE(0x000FAC, 15)
 #define WLAN_AKM_SUITE_FT_FILS_SHA256		SUITE(0x000FAC, 16)
 #define WLAN_AKM_SUITE_FT_FILS_SHA384		SUITE(0x000FAC, 17)
-
+/* DPP Specific AKM SUITE */
+#define WLAN_AKM_SUITE_DPP                  SUITE(0x506F9A,2)
 #define WLAN_MAX_KEY_LEN		32
 
 #define WLAN_PMK_NAME_LEN		16
